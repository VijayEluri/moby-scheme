#include <stdlib.h>
#include "scheme.h"
#include "scheme-lib.h"
#include "kernel.h"
#include "goertzel.h"
#include "arduino_ext.h"

#define SOUNDBUFFERSIZE 350


//
// translated code
//

<<PROGRAM-DEFINITIONS>>

//
// "predefined" code
//

static unsigned long last_millis;

unsigned char soundbuffer1[SOUNDBUFFERSIZE];
unsigned char soundbuffer2[SOUNDBUFFERSIZE];
unsigned char *sb1 = soundbuffer1;
unsigned char *sb2 = soundbuffer2;
int head = 0;
bool sendbuffer = false;

void updatebuffer(int byte) {
     unsigned char* temp;
     sb1[head] = (char)byte; // (char)(head % 4);
     head++;
     if(head == SOUNDBUFFERSIZE) {
     	     temp = sb2;
	     sb2 = sb1;
	     sb1 = temp;
	     head = 0;
	     sendbuffer = true;
     } else {
       	     sendbuffer = false;
     }	      
}

static void do_redraw() {
	if (WorldKernel_redraw_led != NULL) {


		// The following section is for the single LED demo board
		for (char i = 0; i < WorldKernel_num_leds; i++)
			digitalWrite(4 + i, boolean_val(CALL(WorldKernel_redraw_led, 2, WorldKernel_world, alloc_number(i))) ? HIGH : LOW);


		// The following section is for the 4-LED demo board Chris set up
/*		char diff = (char) (sqrt(levels) * (WorldKernel_num_leds + 1) / 256);
		if (diff > WorldKernel_num_leds) diff = WorldKernel_num_leds;
		for (char i = 0; i < diff; i++)
			digitalWrite(4 + i, 1);
		for (char i = diff; i < WorldKernel_num_leds; i++)
			digitalWrite(4 + i, 0);
		
		digitalWrite(12, !digitalRead(11));*/


	}
}

void setup() {
	<<PROGRAM-TOPLEVEL-EXPRESSIONS>>
	
	for (char i = 0; i < WorldKernel_num_leds; i++)
		pinMode(4 + i, OUTPUT);
	last_millis = millis();
	
	do_redraw();
}

void loop() {
	while (last_millis < millis()) {
		bool dirty = false;
	
		if(sendbuffer) {
		  CALL(WorldKernel_buffer_handler, 2, WorldKernel_world, alloc_sb(sb2)); // Should the second parameter be 2? (If it is the number of arguments -- yes)
		}
		analogStart(1, &updatebuffer); // updatebuffer(0);
		for (int i = 0; i < WorldKernel_num_tick_handlers; i++)
			if (last_millis % WorldKernel_period[i] == 0) {
				REREF(WorldKernel_world, CALL(WorldKernel_tick_handler[i], 1, WorldKernel_world));
				dirty = true;
			}
		
		if (dirty) do_redraw();
		last_millis++;
	}
}
